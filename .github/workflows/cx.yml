# Mobb/Checkamrx Fixer on pull requests
# This workflow defines the needed steps to run Checkmarx on every pull request and pass the results to Mobb Fixer.
#
# Secrets in use (add your missing ones):
# CX_TENANT - your Checkmarx tenant name (found in your Checkmarx settings)
# CX_API_TOKEN - your Checkmarx credentials (find how to get it here: https://checkmarx.com/resource/documents/en/34965-68775-generating-a-refresh-token--api-key-.html)
# CX_BASE_URI - your Checkmarx app url, e.g. "https://ast.checkmarx.net/"
# CX_BASE_AUTH_URI - your Checkmarx auth url, e.g. "https://iam.checkmarx.net/"
# MOBB_API_TOKEN - your mobb user credentials (autumatially set if you used the Mobb app to configure the integration)
# GITHUB_TOKEN - automatically set by GitHub

name: "Mobb/Checkmarx"

on:
  issue_comment:
    types: [created]


jobs:
  scan-and-fix:
    name: Issue Comment
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body,'Checkmarx One â€“ Scan Summary & Details') }} # This makes sure that the comment originates from a PR and not an issue comment
    runs-on: 'ubuntu-latest'
    timeout-minutes: 360
    permissions:
      pull-requests: write
      statuses: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Test
        run: |
          echo A comment on PR $NUMBER
          echo The payload: $PAYLOAD
          echo The comment: $COMMENT
          echo The body: $BODY
          echo The number: $NUMBER
          echo "Comment Body: ${{ github.event.comment.body }}"
          echo "2: ${{ github.event.comment }}"
          echo "3: ${{ github.event.comment.issue_url }}"

          
          echo ${{github.event.issue }}
          echo ${{github.event.issue.comments }}
          echo ${{github.event.issue.comments_url }}
          echo ${{github.event.issue.id }}
          echo ${{github.event.issue.pull_request }}
          echo ${{github.event.issue.pull_request.url }}
          curl -s ${{github.event.issue.pull_request.url }} | jq -r '.head.ref'
          env
          
          
          
          
        env:
          NUMBER: ${{ github.event.issue.number }}
          PAYLOAD: ${{ github.event.issueComment.body }}
          COMMENT: ${{ github.event.issue.comments }}
          BODY: ${{ github.event.issue.body }}

      - name: Get Checkmarx Report
        run: |
          SCAN_ID=$(echo "$COMMENT" | sed -n 's/.*scans?id=\([^&]*\).*/\1/p')
          wget https://github.com/Checkmarx/ast-cli/releases/download/2.0.54/ast-cli_2.0.54_linux_x64.tar.gz -O checkmarx.tar.gz
          tar -xf checkmarx.tar.gz
          ./cx configure set --prop-name cx_apikey --prop-value ${{ secrets.CX_API_TOKEN }}
          ./cx configure set --prop-name cx_base_auth_uri --prop-value ${{ secrets.CX_BASE_AUTH_URI }}
          ./cx configure set --prop-name cx_base_uri --prop-value ${{ secrets.CX_BASE_URI }}
          ./cx configure set --prop-name cx_tenant --prop-value ${{ secrets.CX_TENANT }}
          ./cx results show --output-name report --report-format json --scan-id $SCAN_ID
        env:
          COMMENT: ${{ github.event.comment.body }}
      - name: Run Mobb custom
        if: always()
        run: |
          REPO=$(git remote get-url origin)
          REPO=${REPO%".git"}
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          SCANNER=checkmarx
          PR_NUMBER=${{ github.event.issue.number }}
          GITHUB_HEAD_REF=$(curl -s ${{github.event.issue.pull_request.url }} | jq -r '.head.ref')
          echo $REPO
          echo $SCANNER
          echo $PR_NUMBER
          echo $GITHUB_HEAD_REF
          echo GITHUB_SHA
          OUT=$(npx --yes mobbdev@latest review  -r $REPO --ref $GITHUB_HEAD_REF --ch $GITHUB_SHA --api-key ${{ secrets.MOBB_API_TOKEN }} -f report.json  --pr $PR_NUMBER --github-token ${{ secrets.GITHUB_TOKEN }} --scanner $SCANNER)
          RETVAL=$?
          if [ $RETVAL -ne 0 ]; then
            exit $RETVAL
          fi
          OUT=$(echo $OUT | tr '\n' ' ')
         
          echo "fix-report-url=$OUT" >> $GITHUB_OUTPUT

      # - name: Run Mobb on the findings and get fixes
      #   if: always()
      #   uses: mobb-dev/action/review@v1.1
      #   with:
      #     report-file: report.json
      #     api-key: ${{ secrets.MOBB_API_TOKEN }}
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     scanner: checkmarx
